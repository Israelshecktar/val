/* styles/FloatingHearts.module.css */

.heartContainer {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none; /* let clicks pass through */
  z-index: 1;
  overflow: hidden;
}

/* Base heart shape:
   - Rotated square with two half-circles on top 
*/
.heart {
  position: absolute;
  transform: rotate(45deg);
  opacity: 0;
  border-radius: 0;

  /* We'll rely on the inline backgroundColor style from JS. */
  /* The pseudo-elements also use `inherit` to match the parent's background color. */
}
.heart::before,
.heart::after {
  content: "";
  position: absolute;
  width: 100%;
  height: 100%;
  background-color: inherit; /* same color as the .heart */
  border-radius: 50%;
}
.heart::before {
  top: -50%;
  left: 0;
}
.heart::after {
  left: 50%;
  top: 0;
}

/* Keyframes to float them in random directions */
@keyframes floatInAllDirections {
  0% {
    transform: translate(0, 0) scale(0.3) rotate(45deg);
    opacity: 0;
  }
  10% {
    opacity: 1;
    transform: translate(0, 0) scale(1) rotate(45deg);
  }
  100% {
    transform: translate(var(--dx), var(--dy)) scale(1.2) rotate(45deg);
    opacity: 0;
  }
}

/* Attach the animation.
   We read animation-delay and animation-duration from the inline styles,
   plus use the custom CSS variables --dx and --dy for movement. */
.heart {
  animation-name: floatInAllDirections;
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
}
